# EPICS database for
# Adimec OPAL 1000m CamLink Camera in 12 bit mode
#
# Protocol root must match db filename root, i.e. OPAL1000.proto

record( stringin, "$(P)$(R)Model" )
{
    field( VAL,  "Cx-140xMCL-UV" )
    field( PINI, "YES" )
}

####################################
# Overwritting from pgpEdt.template
####################################
record(ao, "$(P)$(R)PixelSize")
{
    field(DESC, "Pixel Size")
    field(VAL,  "4.65")
    field(EGU,  "um")
    field(PINI, "YES")
    info( autosaveFields, "VAL" )
}

#########################
# Setting Functions
#########################

#########################
# Image Format
#########################

record( mbbi, "$(P)$(R)BITALLOC_RBV" )
{
    field( DESC, "Bit Allocation" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(BA) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "10-bit"                    )
    field( ONVL, 1   ) field( ONST, "8-bit"                   )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)BITALLOC" )
{
    field( DESC, "Bit Allocation" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(BA) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "10-bit"                    )
    field( ONVL, 1   ) field( ONST, "8-bit"                   )
    field( FLNK, "$(P)$(R)BITALLOC_RBV" )
}

record( mbbi, "$(P)$(R)SCANFMT_RBV" )
{
    field( DESC, "Scan Format" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(SC) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Full Frame"               )
    field( ONVL, 1   ) field( ONST, "2/3 Partial"              )
    field( TWVL, 2   ) field( TWST, "1/2 Partial"              )
    field( THVL, 3   ) field( THST, "1/4 Partial"              )
    field( FRVL, 4   ) field( FRST, "1/8 Partial"              )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)SCANFMT_HW" )
{
    field( DESC, "Scan Format" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(SC) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Full Frame"               )
    field( ONVL, 1   ) field( ONST, "2/3 Partial"              )
    field( TWVL, 2   ) field( TWST, "1/2 Partial"              )
    field( THVL, 3   ) field( THST, "1/4 Partial"              )
    field( FRVL, 4   ) field( FRST, "1/8 Partial"              )
    field( FLNK, "$(P)$(R)SCANFMT_RBV" )
}

record( mbbo, "$(P)$(R)SCANFMT" )
{
    field( DESC, "Scan Format" )
    field( DTYP, "Soft Channel" )
    field( ZRVL, 0   ) field( ZRST, "Full Frame"               )
    field( ONVL, 1   ) field( ONST, "2/3 Partial"              )
    field( TWVL, 2   ) field( TWST, "1/2 Partial"              )
    field( THVL, 3   ) field( THST, "1/4 Partial"              )
    field( FRVL, 4   ) field( FRST, "1/8 Partial"              )
    field( FLNK, "$(P)$(R)SCANFMT_SEQ" )
}

record( mbbi, "$(P)$(R)VBINNING_RBV" )
{
    field( DESC, "V-Binning" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(VB) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "OFF"                      )
    field( ONVL, 1   ) field( ONST, "ON"                       )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)VBINNING_HW" )
{
    field( DESC, "V-Binning" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(VB) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "OFF"                      )
    field( ONVL, 1   ) field( ONST, "ON"                       )
    field( FLNK, "$(P)$(R)VBINNING_RBV" )
}

record( mbbo, "$(P)$(R)VBINNING" )
{
    field( DESC, "V-Binning" )
    field( DTYP, "Soft Channel" )
    field( ZRVL, 0   ) field( ZRST, "OFF"                      )
    field( ONVL, 1   ) field( ONST, "ON"                       )
    field( FLNK, "$(P)$(R)VBINNING_SEQ" )
}

#########################
# Gain, Black and signal 
#########################

record( longout, "$(P)$(R)GA_SET" )
{
    field( DESC, "Gain Level" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(GA) $(PORT).SER" )
    field( HOPR, 336 )
    field( DRVH, 336 )
    field( LOPR, -84    )
    field( DRVL, -84    )
    field( FLNK, "$(P)$(R)GA_RBV" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)GA_RBV" )
{
    field( DESC, "Gain Level" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(GA) $(PORT).SER" )
    field( PINI, "YES" )
	info( archiveFields,  "VAL" )
}

record( longout, "$(P)$(R)BL_SET" )
{
    field( DESC, "Black Level" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(BL) $(PORT).SER" )
    field( HOPR, 1023 )
    field( DRVH, 1023 )
    field( LOPR, 0    )
    field( DRVL, 0    )
    field( FLNK, "$(P)$(R)BL_RBV" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)BL_RBV" )
{
    field( DESC, "Black Level" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(BL) $(PORT).SER" )
    field( PINI, "YES" )
	info( archiveFields,  "VAL" )
}

###########################
# Save and Load from EEPROM
###########################

record( mbbo, "$(P)$(R)LOAD" )
{
    field( DESC, "Load Settings (from camera EEPROM)" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(LD) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Factory area"             )
    field( ONVL, 1   ) field( ONST, "User 1 area"              )
    field( TWVL, 2   ) field( TWST, "User 2 area"              )
    field( THVL, 3   ) field( THST, "User 3 area"              )
    field( FLNK, "$(P)$(R)ReConfigSeq" )
}

record( mbbo, "$(P)$(R)SAVE" )
{
    field( DESC, "Save Settings (to camera EEPROM)" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(SA) $(PORT).SER" )
    field( ONVL, 1   ) field( ONST, "User 1 area"              )
    field( TWVL, 2   ) field( TWST, "User 2 area"              )
    field( THVL, 3   ) field( THST, "User 3 area"              )
    field( FLNK, "$(P)$(R)CURR_AREA_RBV" )
}

record( mbbi, "$(P)$(R)CURR_AREA_RBV" )
{
    field( DESC, "EEPROM Current Area Number Request" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(EA) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Factory area"             )
    field( ONVL, 1   ) field( ONST, "User 1 area"              )
    field( TWVL, 2   ) field( TWST, "User 2 area"              )
    field( THVL, 3   ) field( THST, "User 3 area"              )
    field( PINI, "YES")
}

#################################
# General Settings and utilities
#################################
record( stringin, "$(P)$(R)FID_RBV" )
{
    field( DESC, "Firmware Version" )
    field( DTYP, "stream" )
    field( INP,	"@Cx-140xMCL-UV.proto GetStr(VN) $(PORT).SER" )
    field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CAMID_RBV" )
{
    field( DESC, "Camera ID" )
    field( DTYP, "stream" )
    field( INP,	"@Cx-140xMCL-UV.proto GetStr(ID) $(PORT).SER" )
    field( PINI, "YES" )
}

record( stringin, "$(P)$(R)MID_RBV" )
{
    field( DESC, "Model ID" )
    field( DTYP, "stream" )
    field( INP,	"@Cx-140xMCL-UV.proto GetStr(MD) $(PORT).SER" )
    field( PINI, "YES" )
}

####################
# Shutter
####################

record( mbbi, "$(P)$(R)SHUTTER_MODE_RBV" )
{
    field( DESC, "Shutter Mode" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(SM) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Preset Shutter"           )
    field( ONVL, 1   ) field( ONST, "Prog. Exposure"           )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)SHUTTER_MODE" )
{
    field( DESC, "Shutter Mode" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(SM) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Preset Shutter"           )
    field( ONVL, 1   ) field( ONST, "Prog. Exposure"           )
    field( FLNK, "$(P)$(R)SHUTTER_MODE_RBV" )
}

record( mbbi, "$(P)$(R)SHUTTER_PRESET_RBV" )
{
    field( DESC, "Preset Shutter" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(SH) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "OFF"                      )
    field( ONVL, 1   ) field( ONST, "1/60"                     )
    field( TWVL, 2   ) field( TWST, "1/100"                    )
    field( THVL, 3   ) field( THST, "250"                      )
    field( FRVL, 4   ) field( FRST, "500"                      )
    field( FVVL, 5   ) field( FVST, "1000"                     )
    field( SXVL, 6   ) field( SXST, "2000"                     )
    field( SVVL, 7   ) field( SVST, "4000"                     )
    field( EIVL, 8   ) field( EIST, "8000"                     )
    field( NIVL, 9   ) field( NIST, "10000"                    )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)SHUTTER_PRESET" )
{
    field( DESC, "Preset Shutter" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(SH) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "OFF"                      )
    field( ONVL, 1   ) field( ONST, "1/60"                     )
    field( TWVL, 2   ) field( TWST, "1/100"                    )
    field( THVL, 3   ) field( THST, "250"                      )
    field( FRVL, 4   ) field( FRST, "500"                      )
    field( FVVL, 5   ) field( FVST, "1000"                     )
    field( SXVL, 6   ) field( SXST, "2000"                     )
    field( SVVL, 7   ) field( SVST, "4000"                     )
    field( EIVL, 8   ) field( EIST, "8000"                     )
    field( NIVL, 9   ) field( NIST, "10000"                    )
    field( FLNK, "$(P)$(R)SHUTTER_PRESET_RBV" )
}

record( longout, "$(P)$(R)SHUTTER_EXPOSURE" )
{
    field( DESC, "Shutter Programmable Exposure" )
    field( DTYP, "stream" )
    field( OUT,  "@Cx-140xMCL-UV.proto SetInt(PE) $(PORT).SER" )
    field( HOPR, 1052 )
    field( DRVH, 1052 )
    field( LOPR, 2    )
    field( DRVL, 2    )
    field( FLNK, "$(P)$(R)SHUTTER_EXPOSURE_RBV" )
        info( autosaveFields, "VAL" )
        info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)SHUTTER_EXPOSURE_RBV" )
{
    field( DESC, "Shutter Programmable Exposure" )
    field( DTYP, "stream" )
    field( INP,  "@Cx-140xMCL-UV.proto GetInt(PE) $(PORT).SER" )
    field( PINI, "YES" )
        info( archiveFields,  "VAL" )
}

####################
# Trigger 
####################

record( mbbi, "$(P)$(R)TRIGGER_MODE_RBV" )
{
    field( DESC, "Trigger Mode" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(TR) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Normal (Continuous)"      )
    field( ONVL, 1   ) field( ONST, "EPS (Edge Pre Select)"    )
    field( TWVL, 2   ) field( TWST, "PWC (Pulse Width Control" )
    field( THVL, 3   ) field( THST, "RCT (Reset Continuous"    )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)TRIGGER_MODE" )
{
    field( DESC, "Trigger Mode" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(TR) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Normal (Continuous)"      )
    field( ONVL, 1   ) field( ONST, "EPS (Edge Pre Select)"    )
    field( TWVL, 2   ) field( TWST, "PWC (Pulse Width Control" )
    field( THVL, 3   ) field( THST, "RCT (Reset Continuous"    )
    field( FLNK, "$(P)$(R)TRIGGER_MODE_RBV" )
}

record( mbbi, "$(P)$(R)TRIGGER_POL_RBV" )
{
    field( DESC, "Trigger Polarity" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(TP) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Active Low"               )
    field( ONVL, 1   ) field( ONST, "Active High"              )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)TRIGGER_POL" )
{
    field( DESC, "Trigger Polarity" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(TR) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Active Low"               )
    field( ONVL, 1   ) field( ONST, "Active High"              )
    field( FLNK, "$(P)$(R)TRIGGER_POL_RBV" )
}

record( mbbi, "$(P)$(R)TRIGGER_INP_RBV" )
{
    field( DESC, "Trigger Input" )
    field( DTYP, "stream" )
    field( INP,	 "@Cx-140xMCL-UV.proto GetInt(TI) $(PORT).SER"  )
    field( ZRVL, 0   ) field( ZRST, "Camera Link"               )
    field( ONVL, 1   ) field( ONST, "Hirose 12pin"              )
    field( PINI, "YES" )
}

record( mbbo, "$(P)$(R)TRIGGER_INP" )
{
    field( DESC, "Trigger Input" )
    field( DTYP, "stream" )
    field( OUT,	 "@Cx-140xMCL-UV.proto SetInt(TR) $(PORT).SER" )
    field( ZRVL, 0   ) field( ZRST, "Camera Link"               )
    field( ONVL, 1   ) field( ONST, "Hirose 12pin"              )
    field( FLNK, "$(P)$(R)TRIGGER_INP_RBV" )
}


###########################
# Special Fields
###########################

# We need to reprocess the records when we load from the EEPROM
record( seq, "$(P)$(R)ReConfigSeq" )
{
        field ( DLY1, 0 ) field( DOL1, "1" )  field( LNK1, "$(P)$(R)BITALLOC_RBV.PROC" )
        field ( DLY2, 0 ) field( DOL2, "1" )  field( LNK2, "$(P)$(R)SCANFMT_RBV.PROC" )
        field ( DLY3, 0 ) field( DOL3, "1" )  field( LNK3, "$(P)$(R)VBINNING_RBV.PROC" )
        field ( DLY4, 0 ) field( DOL4, "1" )  field( LNK4, "$(P)$(R)GA_RBV.PROC" )
        field ( DLY5, 0 ) field( DOL5, "1" )  field( LNK5, "$(P)$(R)BL_RBV.PROC" )
        field ( DLY6, 0 ) field( DOL6, "1" )  field( LNK6, "$(P)$(R)CURR_AREA_RBV.PROC" )
        field ( DLY7, 0 ) field( DOL7, "1" )  field( LNK7, "$(P)$(R)FID_RBV.PROC" )
        field ( DLY8, 0 ) field( DOL8, "1" )  field( LNK8, "$(P)$(R)CAMID_RBV.PROC" )
        field ( DLY9, 0 ) field( DOL9, "1" )  field( LNK9, "$(P)$(R)MID_RBV.PROC" )
        field ( DLYA, 0 ) field( DOLA, "1" )  field( LNKA, "$(P)$(R)SHUTTER_MODE_RBV.PROC" )
        field( FLNK, "$(P)$(R)ReConfigSeq2" )
}

record( seq, "$(P)$(R)ReConfigSeq2" )
{
        field ( DLY1, 0 ) field( DOL1, "1" )  field( LNK1, "$(P)$(R)SHUTTER_PRESET_RBV.PROC" )
        field ( DLY2, 0 ) field( DOL2, "1" )  field( LNK2, "$(P)$(R)SHUTTER_EXPOSURE_RBV.PROC" )
        field ( DLY3, 0 ) field( DOL3, "1" )  field( LNK3, "$(P)$(R)TRIGGER_MODE_RBV.PROC" )
        field ( DLY4, 0 ) field( DOL4, "1" )  field( LNK4, "$(P)$(R)TRIGGER_POL_RBV.PROC" )
        field ( DLY5, 0 ) field( DOL5, "1" )  field( LNK5, "$(P)$(R)TRIGGER_INP_RBV.PROC" )
}


# When changing the Scan Format, we need to do the following:
# 0. If Scan Format != 0, we need to disable the V-Binning in case it is in use
# 1. Stop the acquisition
# 2. Calculate and set the new Y size
# 3. Change the Scan Format on the device
# 4. Start the acquisition
record( calcout, "$(P)$(R)SCANFMT_SANITY_CHECK" )
{
        field( DESC, "Disable VBinning if SCANFMT > 0" )
        field( INPA, "$(P)$(R)SCANFMT.RVAL" )
        field( CALC, "A>0?0:1" )
        field( OOPT, "When Zero" )
        field( OUT, "$(P)$(R)VBINNING_HW PP" )
}

record( calcout, "$(P)$(R)VBINNING_SANITY_CHECK" )
{
        field( DESC, "Disable ScanFmt if V-Binning > 0" )
        field( INPA, "$(P)$(R)VBINNING.RVAL" )
        field( CALC, "A>0?0:1" )
        field( OOPT, "When Zero" )
        field( OUT, "$(P)$(R)SCANFMT_HW PP" )
}

record( calcout, "$(P)$(R)SCANFMT_FLOAT" )
{
        field( DESC, "Conv ScanFmt to float val" )
        field( INPA, "$(P)$(R)SCANFMT_RBV.RVAL CP" )
        field( CALC, "A=0?1:A=1?2.0/3:A=2?1.0/2:A=3?1.0/4:A=4?1.0/8:0" )
}

record( calcout, "$(P)$(R)SIZEY_CALC" )
{
        field( DESC, "Calc height based on bin and scanfmt" )
        field( INPA, "$(P)$(R)MaxSizeY_RBV CP" )
        field( INPB, "$(P)$(R)SCANFMT_FLOAT CP" )
        field( INPC, "$(P)$(R)VBINNING_RBV.RVAL CP" )
        field( CALC, "C=1?CEIL(A/2.0):CEIL(A*B)" )
        field( OOPT, "When Non-zero" )
        field( OUT, "$(P)$(R)FullRow PP" )
}

record( seq, "$(P)$(R)SCANFMT_SEQ" )
{
        field ( DLY1, 0 ) field( DOL1, 0 )                field( LNK1, "$(P)$(R)Acquire CA" )
        field ( DLY2, 5 ) field( DOL2, "1" )                field( LNK2, "$(P)$(R)SCANFMT_SANITY_CHECK.PROC" )
        field ( DLY3, 0 ) field( DOL3, "$(P)$(R)SCANFMT" )  field( LNK3, "$(P)$(R)SCANFMT_HW PP" )
}

record( seq, "$(P)$(R)VBINNING_SEQ" )
{
        field ( DLY1, 0 ) field( DOL1, 0 )                field( LNK1, "$(P)$(R)Acquire CA" )
        field ( DLY2, 5 ) field( DOL2, "1" )                field( LNK2, "$(P)$(R)VBINNING_SANITY_CHECK.PROC" )
        field ( DLY3, 0 ) field( DOL3, "$(P)$(R)VBINNING" ) field( LNK3, "$(P)$(R)VBINNING_HW PP" )
}

